testsuite Basic reflection

test primitive types
  using database tests/hello/Empty.jar
  assert
    PrimitiveType("boolean")
    PrimitiveType("byte")
    PrimitiveType("char")
    PrimitiveType("short")
    PrimitiveType("int")
    PrimitiveType("long")
    PrimitiveType("float")
    PrimitiveType("double")

test null type
  using database tests/hello/Empty.jar
  assert
    NullType("null_type")

test Declaring class
  using database tests/hello/Empty.jar
    ->
  MainMethodDeclaration(?method),
  DeclaringClassMethod[?method] = ?class
    ->
  project class
    ->
  "Empty"

test Class initializer of java.lang.Object
  using database tests/hello/Empty.jar
    ->
  ClassInitializer["java.lang.Object"] = ?method
    ->
  "<java.lang.Object: void <clinit>()>"

test Class initializers of a class with a class initializer
  using database tests/hello/ClassInit.jar
    ->
  ClassInitializer["ClassInit"] = ?method
    ->
  "<ClassInit: void <clinit>()>"

test String is a subclass of Object
  using database tests/hello/Empty.jar
  assert
    Subclass("java.lang.Object", "java.lang.String")

test Number is the direct superclass of Integer
  using database tests/hello/Empty.jar
  assert
    DirectSuperclass["java.lang.Integer"] = "java.lang.Number"

test Number is a subclass of Object
  using database tests/hello/Empty.jar
  assert
    Subclass("java.lang.Object", "java.lang.Number")

test Integer is subclass of Object via Number
  using database tests/hello/Empty.jar
  assert
    Subclass("java.lang.Object", "java.lang.Integer")

test Object has no superclass
  using database tests/hello/Empty.jar
  assert
    not DirectSuperclass["java.lang.Object"] = _,
    not DirectSubclass["java.lang.Object"] = _,
    not Subclass(_, "java.lang.Object")

test Interfaces have no superclass
  using database tests/hello/Empty.jar
  assert
    not DirectSuperclass["java.util.List"] = _,
    not Subclass(_, "java.util.List")
    not DirectSuperclass["java.lang.Comparable"] = _,
    not Subclass(_, "java.lang.Comparable")
    not DirectSuperclass["java.lang.Cloneable"] = _,
    not Subclass(_, "java.lang.Cloneable")

test String directly implements Comparable
  using database tests/hello/Empty.jar
  assert
    DirectSuperinterface("java.lang.String", "java.lang.Comparable")

test String implements Comparable
  using database tests/hello/Empty.jar
  assert
    Superinterface("java.lang.Comparable", "java.lang.String")

test String does not implement Cloneable, direclty, nor indirectly
  using database tests/hello/Empty.jar
  assert
    not DirectSuperinterface("java.lang.String", "java.lang.Cloneable")
    not Superinterface("java.lang.Cloneable", "java.lang.String")

test ArrayList directly implements List
  using database tests/hello/Empty.jar
  assert
    DirectSuperinterface("java.util.ArrayList", "java.util.List")

test ArrayList does not directly implement Collection
  using database tests/hello/Empty.jar
  assert
    not DirectSuperinterface("java.util.ArrayList", "java.util.Collection")

test But, ArrayList does implement Collection
  using database tests/hello/Empty.jar
  assert
    Superinterface("java.util.Collection", "java.util.ArrayList")

/**
 * Casts
 */
test Casting to self
  using database tests/hello/Empty.jar
  assert
    CheckCast("java.lang.Integer", "java.lang.Integer")

test Casting to superclasses
  using database tests/hello/Empty.jar
  assert
    CheckCast("java.lang.Integer", "java.lang.Number")
    CheckCast("java.lang.Integer", "java.lang.Object")

test Casting to subclasses fails
  using database tests/hello/Empty.jar
  assert
    not CheckCast("java.lang.Number", "java.lang.Integer")
    not CheckCast("java.lang.Object", "java.lang.Integer")

test Casting to unrelated classes fails
  using database tests/hello/Empty.jar
  assert
    not CheckCast("java.lang.String", "java.lang.Integer")

test Cast array to Object
  using database tests/hello/Empty.jar
  assert
    CheckCast("int[]", "java.lang.Object")
    CheckCast("java.lang.String[]", "java.lang.Object")

test Cast int[] to Cloneable
  using database tests/hello/Empty.jar
  assert
    CheckCast("int[]", "java.lang.Cloneable")
    CheckCast("java.lang.String[]", "java.lang.Cloneable")

test Cast int[] to Serializable
  using database tests/hello/Empty.jar
  assert
    CheckCast("int[]", "java.io.Serializable")
    CheckCast("java.lang.String[]", "java.io.Serializable")

test Cast int[] to Comparable fails
  using database tests/hello/Empty.jar
  assert
    not CheckCast("int[]", "java.util.Comparable")

test Cast int[] to String fails
  using database tests/hello/Empty.jar
  assert
    not CheckCast("int[]", "java.lang.String")

test Cast class[] to Object[]
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.lang.Object[]", "java.lang.Object[]")
    CheckCast("java.lang.String[]", "java.lang.Object[]")
    CheckCast("java.lang.Integer[]", "java.lang.Object[]")

test Cast interface[] to Object[]
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.util.List[]", "java.lang.Object[]")
    CheckCast("java.io.Serializable[]", "java.lang.Object[]")

test Cast class[] to implemented interface[]
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.util.ArrayList[]", "java.util.List[]")
    CheckCast("java.lang.Integer[]", "java.io.Serializable[]")

test Cast interface[] to interface[]
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.io.Serializable[]", "java.io.Serializable[]")
    CheckCast("java.util.Collection[]", "java.util.Collection[]")
    CheckCast("java.util.List[]", "java.util.List[]")

test Cast interface[] to superinterface[]
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.util.List[]", "java.util.Collection[]")

test Cast interface[] to not superinterface[] fails
  using database tests/hello/Arrays.jar
  assert
    not CheckCast("java.util.List[]", "java.util.Cloneable[]")

test Cast class[] to not implemented interface[] fails
  using database tests/hello/Arrays.jar
  assert
    not CheckCast("java.lang.Integer[]", "java.lang.Cloneable[]")

test Cast Integer[][] to Object[]
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.lang.Integer[][]", "java.lang.Object[]")

test Cast interface[][] to interface[][]
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.io.Serializable[][]", "java.io.Serializable[][]")
    CheckCast("java.util.Collection[][]", "java.util.Collection[][]")
    CheckCast("java.util.List[][]", "java.util.List[][]")

test Cast Integer[][] to String[] fails
  using database tests/hello/Arrays.jar
  assert
    not CheckCast("java.lang.Integer[][]", "java.lang.String[]")

test Cast primitive array to itself
  using database tests/hello/Arrays.jar
  assert
    CheckCast("int[]", "int[]")
    CheckCast("float[]", "float[]")

test Cast float[] to double[] fails
  using database tests/hello/Arrays.jar
  assert
    not CheckCast("float[]", "double[]")

test Cast int[] to long[] fails
  using database tests/hello/Arrays.jar
  assert
    not CheckCast("int[]", "long[]")

test Cast Integer to Comparable, a direct superinterface
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.lang.Integer", "java.lang.Comparable")

test Cast Integer to Serializable, a superinterface of its superclass
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.lang.Integer", "java.io.Serializable")

test Cast Integer to Cloneable fails
  using database tests/hello/Arrays.jar
  assert
    not CheckCast("java.lang.Integer", "java.lang.Cloneable")

test Cast ArrayList to various superinterfaces
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.util.ArrayList", "java.util.List")
    CheckCast("java.util.ArrayList", "java.util.Collection")
    CheckCast("java.util.ArrayList", "java.io.Serializable")

test Cast TreeSet to various superinterfaces
  using database tests/hello/Arrays.jar
  assert
    CheckCast("java.util.TreeSet", "java.util.SortedSet")
    CheckCast("java.util.TreeSet", "java.util.Set")
    CheckCast("java.util.TreeSet", "java.util.Collection")

/**
 * Overrides finalize
 */
test java.io.FileInputStream overrides finalize
  using database tests/hello/Empty.jar
  assert
    OverridesFinalize("java.io.FileInputStream")

test java.io.FileOutputStream overrides finalize
  using database tests/hello/Empty.jar
  assert
    OverridesFinalize("java.io.FileOutputStream")

test java.lang.String does not override finalize
  using database tests/hello/Empty.jar
  assert
    not OverridesFinalize("java.lang.String")

/**
 * Throws clause

test Test1 declares to throw Exception
  using database tests/hello/Exceptions.jar
  assert
    MethodDeclaration:Exception("java.lang.Exception", "<Test1: void test()>")

test Constructor of java.lang.Integer declares to throw NumberFormatException, and no other
  using database tests/hello/Empty.jar
    ->
  MethodDeclaration:Exception(?type, "<java.lang.Integer: void <init>(java.lang.String)>")
    ->
  "java.lang.NumberFormatException"
 */
testsuite generic for all analyses with context-insensitive heap abstractions

/**
 * Static fields
 */
test Simple static field assigned in two methods.
  using database tests/hello/StaticField.jar
    ->
  StaticFieldPointsTo(?heap, "<StaticField: java.lang.Object field>")
    ->
  "StaticField.g/new java.lang.Object/0"
  "StaticField.f/new java.lang.Object/0"

/**
 * Allocations
 */
test Simple Object allocation o1
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?heap, "<New: java.lang.Object o1>")  
    ->
  "New.main/new java.lang.Object/0"

test Simple Object allocation o2
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?heap, "<New: java.lang.Object o2>")  
    ->
  "New.main/new java.lang.Object/1"

test Simple String constant 1
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?heap, "<New: java.lang.String s1>")  
    ->
  "<<string-constant>>"

test Simple String constant 2
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?heap, "<New: java.lang.String s2>")  
    ->
  "<<string-constant>>"

test Simple String allocation 3
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?heap, "<New: java.lang.String s3>")  
    ->
  "New.main/new java.lang.String/0"

test Simple array allocation 1
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?heap, "<New: int[] a1>")  
    ->
  "New.main/new int[]/0"

test Simple array allocation 2
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?heap, "<New: java.lang.String[] a2>")  
    ->
  "New.main/new java.lang.String[]/0"

/**
 * Inheritance
 */
test Simple super method call
  using database tests/hello/Super.jar
    ->
  StaticFieldPointsTo(?heap, "<Super: java.lang.Object field>")
    ->
  "Base.foo/new java.lang.Object/0"

test Method overriding
  using database tests/hello/VirtualMethodOverride.jar
    ->
  StaticFieldPointsTo(?h, "<VirtualMethodOverride: java.lang.Object field>")
    ->
  "Extension.foo/new java.lang.Object/0"

test Virtual method inheritance
  using database tests/hello/VirtualMethod.jar
    ->
  StaticFieldPointsTo(?h, "<Test4: java.lang.Object field>")
    ->
  "Test4$Base.foo/new java.lang.Object/0"

/**
 * Special method invocations
 */
test Invocation of private method and inheritance
  using database tests/hello/InvokeSpecialPrivate.jar
    ->
  StaticFieldPointsTo(?h, "<Test1: java.lang.Object extField>")
    ->
  "Extension.foo/new java.lang.Object/0"

test Invocation of private method and inheritance
  using database tests/hello/InvokeSpecialPrivate.jar
    ->
  StaticFieldPointsTo(?h, "<Test1: java.lang.Object baseField>")
    ->
  "Base.foo/new java.lang.Object/0"

test Special method on variables that don't point anywhere are not invoked.
  using database tests/hello/InvokeSpecialPrivate.jar
  assert
    not Reachable("<Test2: void foo()>")

/**
 * Assignments
 */
test Example from Lhotak's Ph.D. thesis page 8.
  using database tests/hello/Assignment.jar
    ->
  StaticFieldPointsTo(?h, "<Assignment: java.lang.Object a>")
    ->
  "Assignment.main/new java.lang.Object/0"
  "Assignment.main/new java.lang.Object/1"

test Example from Lhotak's Ph.D. thesis page 8.
  using database tests/hello/Assignment.jar
    ->
  StaticFieldPointsTo(?h, "<Assignment: java.lang.Object b>")
    ->
  "Assignment.main/new java.lang.Object/0"
  "Assignment.main/new java.lang.Object/1"

test Example from Lhotak's Ph.D. thesis page 8.
  using database tests/hello/Assignment.jar
    ->
  StaticFieldPointsTo(?h, "<Assignment: java.lang.Object c>")
    ->
  "Assignment.main/new java.lang.Object/0"
  "Assignment.main/new java.lang.Object/1"
  "Assignment.main/new java.lang.Object/2"

/**
 * Class initializers
 */
test Reachability of class initializer
  using database tests/hello/ClassInit.jar
    ->
  StaticFieldPointsTo(?h, "<ClassInit: java.lang.Object field>")
    ->
  "ClassInit.<clinit>/new java.lang.Object/0"

/**
 * Casts
 */
test
  using database tests/hello/Cast.jar
    ->
  StaticFieldPointsTo(?h, "<Cast: java.lang.Object o1>")
    ->
  "Cast.main/new java.lang.String/0"

test
  using database tests/hello/Cast.jar
    ->
  StaticFieldPointsTo(?h, "<Cast: java.lang.Object o2>")
    ->
  "Cast.main/new java.lang.String/0"

test Invalid cast
  using database tests/hello/Cast.jar
    ->
  StaticFieldPointsTo(?h, "<Cast: java.lang.Object o4>")
    ->
  "Cast.main/new java.lang.Object/0"
  "Cast.main/new java.lang.String/1"

test Invalid cast
  using database tests/hello/Cast.jar
    ->
  StaticFieldPointsTo(?h, "<Cast: java.lang.Object o3>")
    ->
  "Cast.main/new java.lang.String/1"

test Invalid cast
  using database tests/hello/Cast.jar
  assert
    not StaticFieldPointsTo("Cast.main/new java.lang.Object/0", "<Cast: java.lang.Object o3>")

/**
 * Arrays
 */
test Analysis is array-element insensitive (Test1)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test1: java.lang.Object o1>")
    ->
  "Test1.test/new java.lang.Object/0"
  "Test1.test/new java.lang.Object/1"

test Analysis is array-element insensitive (Test1)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test1: java.lang.Object o2>")
    ->
  "Test1.test/new java.lang.Object/0"
  "Test1.test/new java.lang.Object/1"

test Simple array allocation (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.io.Serializable[] allocSerializable>")
    ->
  "Test2.test/new java.io.Serializable[]/0"

test Simple array allocation (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.util.Collection[] allocList>")
    ->
  "Test2.test/new java.util.List[]/0"

test Simple array allocation (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.util.List[] allocArrayList>")
    ->
  "Test2.test/new java.util.ArrayList[]/0"

test Assign interface array to Object[] (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.lang.Object[] assignObject>")
    ->
  "Test2.test/new java.io.Serializable[]/0"
  "Test2.test/new java.util.List[]/0"
  "Test2.test/new java.util.ArrayList[]/0"

test Assign interface array to itself (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.io.Serializable[] assignSerializable>")
    ->
  "Test2.test/new java.io.Serializable[]/0"

test Assign interface array to super interface (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.util.Collection[] assignCollection>")
    ->
  "Test2.test/new java.util.List[]/0"
  "Test2.test/new java.util.ArrayList[]/0"

test Assign interface array to super interface (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.util.List[] assignList>")
    ->
  "Test2.test/new java.util.ArrayList[]/0"

test Cast interface array (Test2)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.util.List[] castList>")
    ->
  "Test2.test/new java.util.List[]/0"
  "Test2.test/new java.util.ArrayList[]/0"

test Simple multi-dimensional array (Test3)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test3: java.lang.Object o>")
    ->
  "Test3.test/new java.lang.Object/0"

test Multi-dimensional array (Test4)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test4: java.lang.Object o1>")
    ->
  "Test4.test/new java.lang.Object/0"
  "Test4.test/new java.lang.Object/1"

test Multi-dimensional array (Test4)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test4: java.lang.Object o2>")
    ->
  "Test4.test/new java.lang.Object/0"
  "Test4.test/new java.lang.Object/1"

test Multi-dimensional array (Test5)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test5: java.lang.Object o>")
    ->
  "Test5.test/new java.lang.Object/0"

test System.arraycopy (Test6)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test6: java.lang.Object o1>")
    ->
  "Test6.test/new java.lang.Object/0"
  "Test6.test/new java.lang.Object/1"

test System.arraycopy (Test6)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test6: java.lang.Object o2>")
    ->
  "Test6.test/new java.lang.Object/0"
  "Test6.test/new java.lang.Object/1"

test System.arraycopy uses type filter (Test7)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test7: java.lang.Object o1>")
    ->
  "Test7.test/new java.lang.String/0"
  "Test7.test/new java.lang.String/1"

test System.arraycopy uses type filter (Test7)
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test7: java.lang.Object o2>")
    ->
  empty

test Cast interface array
  using database tests/hello/Arrays.jar
    ->
  StaticFieldPointsTo(?h, "<Test2: java.util.ArrayList[] castArrayList>")
    ->
  "Test2.test/new java.util.ArrayList[]/0"

/**
 * Privileged actions
 */
test Run method of privileged action is reachable (Test1)
  using database tests/hello/PrivilegedActions.jar
  assert
    Reachable("<Test1: java.lang.Object run()>")

test Points-to information resulting from run of a privileged action (Test1)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test1.run/new java.lang.Object/0", "<Test1: java.lang.Object o>")

test Privileged actions returns its result through doPrivileged (Test1)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test1.run/new java.lang.Object/0", "<PrivilegedActions: java.lang.Object o1>")

test Run method of privileged action is reachable (Test2)
  using database tests/hello/PrivilegedActions.jar
  assert
    Reachable("<Test2Base: java.lang.Object run()>")

test Points-to information resulting from run of a privileged action (Test2)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test2Base.run/new java.lang.Object/0", "<Test2Base: java.lang.Object o>")

test Privileged actions returns its result through doPrivileged  (Test2)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test2Base.run/new java.lang.Object/0", "<PrivilegedActions: java.lang.Object o2>")

test Run method of privileged action is reachable (Test3)
  using database tests/hello/PrivilegedActions.jar
  assert
    Reachable("<Test3: java.lang.Object run()>")

test Points-to information resulting from run of a privileged action (Test3)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test3.run/new java.lang.Object/0", "<Test3: java.lang.Object o>")

test Privileged actions returns its result through doPrivileged  (Test3)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test3.run/new java.lang.Object/0", "<PrivilegedActions: java.lang.Object o3>")

test Run method of privileged action is reachable (Test4)
  using database tests/hello/PrivilegedActions.jar
  assert
    Reachable("<Test4: java.lang.Object run()>")

test Points-to information resulting from run of a privileged action (Test4)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test4.run/new java.lang.Object/0", "<Test4: java.lang.Object o>")

test Privileged actions returns its result through doPrivileged  (Test4)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test5.run/new java.lang.Object/0", "<PrivilegedActions: java.lang.Object o5>")

test Run method of privileged action is reachable (Test5)
  using database tests/hello/PrivilegedActions.jar
  assert
    Reachable("<Test5: java.lang.Object run()>")

test Points-to information resulting from run of a privileged action (Test5)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test5.run/new java.lang.Object/0", "<Test5: java.lang.Object o>")

test Privileged actions returns its result through doPrivileged  (Test5)
  using database tests/hello/PrivilegedActions.jar
  assert
    StaticFieldPointsTo("Test5.run/new java.lang.Object/0", "<PrivilegedActions: java.lang.Object o5>")

/**
 * Threads
 */
test There is a system thread group
  using database tests/hello/Empty.jar
  assert
    SystemThreadGroup("<<system-thread-group>>")

test There is a main thread group
  using database tests/hello/Empty.jar
  assert
    MainThreadGroup("<<main-thread-group>>")

test There is a main thread
  using database tests/hello/Empty.jar
  assert
    MainThread("<<main-thread>>")

test The main thread is a running thread
  using database tests/hello/Empty.jar
  assert
    RunningThread("<<main-thread>>")
  
test The system thread group is initialized by invoking the constructor ThreadGroup()
  using database tests/hello/Empty.jar
  assert
    Reachable("<java.lang.ThreadGroup: void <init>()>")

test The system thread group has no parent
  using database tests/hello/Empty.jar
    ->
  InstanceFieldPointsTo(?h, "<java.lang.Thread: java.lang.ThreadGroup parent>", "<<system-thread-group>>")
    ->
  empty

test The parent of the main thread group is the system thread group
  using database tests/hello/Empty.jar
  assert
    InstanceFieldPointsTo(
      "<<system-thread-group>>",
      "<java.lang.ThreadGroup: java.lang.ThreadGroup parent>",
      "<<main-thread-group>>")

test The thread group of the main thread is the main thread group
  using database tests/hello/Empty.jar
  assert
    InstanceFieldPointsTo("<<main-thread-group>>", "<java.lang.Thread: java.lang.ThreadGroup group>", "<<main-thread>>")

test The thread group of the Reference Handler thread is the system thread group
  using database tests/hello/Empty.jar
  assert
    InstanceFieldPointsTo(
      "<<system-thread-group>>",
      "<java.lang.Thread: java.lang.ThreadGroup group>",
      "java.lang.ref.Reference.<clinit>/new java.lang.ref.Reference$ReferenceHandler/0")

test Reference handler thread is a running thread (java.lang.ref.Reference)
  using database tests/hello/Empty.jar
  assert
    RunningThread("java.lang.ref.Reference.<clinit>/new java.lang.ref.Reference$ReferenceHandler/0")

test Run method of sub-classed thread is reachable (Test1)
  using database tests/hello/Threads.jar
  assert
    Reachable("<Test1$MyThread: void run()>")

test The allocated thread is a RunningThread (Test1)
  using database tests/hello/Threads.jar
  assert
    RunningThread("Test1.test/new Test1$MyThread/0")

test Overridden Thread.start (Test1b)
  using database tests/hello/Threads.jar
  assert
    Reachable("<Test1b$MyThread: void run()>")

test Overridden Thread.start (Test1c)
  using database tests/hello/Threads.jar
  assert
    Reachable("<Test1c$MyThread: void start()>")
    not Reachable("<Test1c$MyThread: void run()>")

test Virtual method lookup for Thread.start (Test1d)
  using database tests/hello/Threads.jar
  assert
    not Reachable("<Test1d$BaseThread: void run()>")
    Reachable("<Test1d$MyThread: void run()>")

test Run method of Runnable is reachable (Test2)
  using database tests/hello/Threads.jar
  assert
    Reachable("<Test2$MyRunnable: void run()>")

test The allocated thread is a RunningThread (Test2)
  using database tests/hello/Threads.jar
  assert
    RunningThread("Test2.test/new java.lang.Thread/0")

test Run method of fake thread is not reachable (Test3)
  using database tests/hello/Threads.jar
  assert
    Reachable("<Test3$MyFakeThread: void start()>")
    not Reachable("<Test3$MyFakeThread: void run()>")

test Native method Thread.currentThread() returns the running threads
  using database tests/hello/Threads.jar
  assert
    StaticFieldPointsTo("<<main-thread>>", "<Test4: java.lang.Thread currentThread>")
    StaticFieldPointsTo("Test1.test/new Test1$MyThread/0", "<Test4: java.lang.Thread currentThread>")
    StaticFieldPointsTo("Test2.test/new java.lang.Thread/0", "<Test4: java.lang.Thread currentThread>")

/**
 * Finalization
 */
test Finalize method is reachable
  using database tests/hello/New.jar
  assert
    Reachable("<TestFinalize2: void finalize()>")

test Finalizer thread is a running thread (java.lang.ref.Finalizer)
  using database tests/hello/Empty.jar
  assert
    RunningThread("java.lang.ref.Finalizer.<clinit>/new java.lang.ref.Finalizer$FinalizerThread/0")

/**
 * Object.clone()
 */
test Object.clone returns an object
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?h, "<TestClone1: TestClone1 field>")
    ->
  "TestClone1.test/new TestClone1/0"

test Object.clone returns an object
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?h, "<TestClone2: TestClone2 field>")
    ->
  "TestClone2.test/new TestClone2/0"

test Object.clone overrides can allocate an object themselves
  using database tests/hello/New.jar
    ->
  StaticFieldPointsTo(?h, "<TestClone3: TestClone3 field>")
    ->
  "TestClone3.clone/new TestClone3/0"

/**
 * System streams
 */
test System.in points to something.
  using database tests/hello/Empty.jar
  assert
    StaticFieldPointsTo(_, "<java.lang.System: java.io.InputStream in>")

test System.out points to something.
  using database tests/hello/Empty.jar
  assert
    StaticFieldPointsTo(_, "<java.lang.System: java.io.PrintStream out>")

test System.err points to something.
  using database tests/hello/Empty.jar
  assert
    StaticFieldPointsTo(_, "<java.lang.System: java.io.PrintStream err>")

/**
 * Reflection
 */
test Object.getClass()
  using database tests/hello/Reflect.jar
  assert
    StaticFieldPointsTo("<class java.lang.Integer>", "<Test1: java.lang.Object o>")

test Object.getClass() followed by newInstance results in points-to
  using database tests/hello/Reflect.jar
  assert
    StaticFieldPointsTo(_, "<Test2: java.lang.Object o>")

